definitions:
  controllers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - username
    type: object
  controllers.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  models.ApiError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  models.ApiResponse:
    properties:
      data: {}
      errors:
        items:
          $ref: '#/definitions/models.ApiError'
        type: array
      isSuccess:
        type: boolean
    type: object
info:
  contact: {}
  description: API for managing products
  title: Product API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      parameters:
      - description: Login request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses: {}
      summary: Login
      tags:
      - auth
  /api/v1/ping:
    get:
      description: Check if the server is running
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Ping server
      tags:
      - health
  /api/v1/users:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controllers.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/controllers.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ApiResponse'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Get user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/controllers.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/controllers.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Update a user
      tags:
      - users
swagger: "2.0"
